	],
	wordsLen = words.length,
	idx;

    function addEvent(elem, eventType, handler) {
        if (elem.addEventListener) {
            elem.addEventListener (eventType, handler, false);
        } else if (elem.attachEvent) {
            handler = function (e) {
                var target = (typeof e.target === 'undefined') ? e.srcElement : e.target;

                handler.call(target, { 'target' : target });
            };
            elem.attachEvent ('on' + eventType, handler);
        } else {
            return false;
        }
    };	

	var popupEvt = (function () {
		var openIdx = null;

		return (function (e) {
			var element = e.target,
				term,
				notes,
				popup,
				idx;

			if (!element.className || !element.className.match(/jargonehighlight/)) { return; }

			if ((openIdx !== null) || e.type.match(/(focusout)/)) {
				popup = document.getElementById('jargonepopup-' + openIdx);
				if (popup !== null) {
					document.body.removeChild(popup);
					openIdx = null;
					element.removeAttribute('aria-describedby');
				}
			} else {
				term = element.firstChild.nodeValue.toLowerCase();

				for (idx = 0; idx < wordsLen; idx++ ) {
					if (term.match(new RegExp(words[idx][0])) && words[idx][1]) {
						openIdx = idx + 1;
						notes = words[idx][1];
						popup = document.createElement("div");
						popup.id = "jargonepopup-" + openIdx;
						popup.className = "jargonepopup";
						document.body.appendChild(popup);
						popup.innerHTML = notes;
						popup.style.left = element.getBoundingClientRect().left + 'px';
						popup.style.top = element.getBoundingClientRect().top + 20 + 'px';
						popup.style.visibility = 'visible';
						element.setAttribute('aria-describedby', popup.id);
						break;
					}
				}
			}
			if (event.stopPropagation) {
				event.stopPropagation();
			} else {
				event.cancelBubble = true;
			}
		});
	}());

    // From http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/
    function findAndReplace(searchText, replacement, searchNode) {
        if (!searchText || typeof replacement === 'undefined') {
            // Throw error here if you want...
            return;
        }
        var regex = typeof searchText === 'string' ?
                    new RegExp(searchText, 'g') : searchText,
            childNodes = (searchNode || document.body).childNodes,
            cnLength = childNodes.length,
            excludes = 'html,head,style,title,link,meta,script,object,iframe';
        while (cnLength--) {
            var currentNode = childNodes[cnLength];
            if (currentNode.nodeType === 1 &&
                (excludes + ',').indexOf(currentNode.nodeName.toLowerCase() + ',') === -1) {
                arguments.callee(searchText, replacement, currentNode);
            }
            if (currentNode.nodeType !== 3 || !regex.test(currentNode.data) ) {
                continue;
            }
            var parent = currentNode.parentNode,
                frag = (function(){
                    var html = currentNode.data.replace(regex, replacement),
                        wrap = document.createElement('div'),
                        frag = document.createDocumentFragment();
                    wrap.innerHTML = html;
                    while (wrap.firstChild) {
                        frag.appendChild(wrap.firstChild);
                    }
                    return frag;
                })();
            parent.insertBefore(frag, currentNode);
            parent.removeChild(currentNode);
        }
    }

    var css = document.createElement("style");
    css.type = "text/css";
    css.innerHTML = ".jargonehighlight { background-color: #FFFF88 !important; color: black; } .jargonehasnotes { cursor: help; border-bottom:1px dashed !important; } .jargonepopup { position: fixed; z-index: 1000 !important; visibility: hidden; background-color: #FFFFCC; color: black; border: solid silver 1px; margin: 5px; padding: 6px;} ";
    document.getElementsByTagName("head")[0].appendChild(css);

	for (idx = 0; idx < wordsLen; idx++) { // for each word
		var pattern = '\\b' + words[idx][0].replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
        if (pattern.slice(-1) != '.') {
            pattern = pattern + '\\b';
        }
        var regex = new RegExp('(' + pattern + ')', 'ig');
    
		findAndReplace( regex, '<span class="jargonehighlight jargonehasnotes" tabindex="0">$1<\/span>');
	}
	addEvent(document, 'focusin', popupEvt);
	addEvent(document, 'focusout', popupEvt);
})();
